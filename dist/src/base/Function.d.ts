import { Function } from "ts-toolbelt";
export declare type MaybeCurried<F extends Function.Function> = F | Function.Curry<F>;
export declare const curryN: <Fn extends Function.Function<any, any>>(n: number, f: Fn) => Function.Curry<Fn>;
export declare const curry: <Fn extends Function.Function<any, any>>(f: Fn) => Function.Curry<Fn>;
export declare const compose: Function.Compose;
export declare const pipe: Function.Pipe;
export declare const always: <A>(x: A) => (a?: any) => A;
export declare const false_: (a?: any) => boolean;
export declare const true_: (a?: any) => boolean;
export declare const identity: <A>(x: A) => A;
export declare const flip: Function.Curry<(<F extends Function.Function<any, any>>(f: F, a: Parameters<F>[1], b: Parameters<F>[0], ...args: any[]) => any)>;
