export declare function allPass<T>(fs: ((x: T) => boolean)[]): (x: T) => boolean;
export declare function allPass<T>(fs: ((x: T) => boolean)[], x: T): boolean;
export declare function and(a: boolean): (b: boolean) => boolean;
export declare function and(a: boolean, b: boolean): boolean;
export declare function anyPass<T>(fs: ((x: T) => boolean)[]): (x: T) => boolean;
export declare function anyPass<T>(fs: ((x: T) => boolean)[], x: T): boolean;
export declare function both<T>(f: (x: T) => boolean): (g: (x: T) => boolean, x: T) => boolean;
export declare function both<T>(f: (x: T) => boolean, g: (x: T) => boolean): (x: T) => boolean;
export declare function both<T>(f: (x: T) => boolean, g: (x: T) => boolean, x: T): boolean;
export declare function either<T>(f: (x: T) => boolean): (g: (x: T) => boolean, x: T) => boolean;
export declare function either<T>(f: (x: T) => boolean, g: (x: T) => boolean): (x: T) => boolean;
export declare function either<T>(f: (x: T) => boolean, g: (x: T) => boolean, x: T): boolean;
export declare function not<T>(f: (x: T) => boolean): (x: T) => boolean;
export declare function not<T>(f: (x: T) => boolean, x: T): boolean;
export declare function or(a: boolean): (b: boolean) => boolean;
export declare function or(a: boolean, b: boolean): boolean;
export declare function unless<T>(pred: (x: T) => boolean): (f: (x: T) => any, x: T) => any;
export declare function unless<T>(pred: (x: T) => boolean, f: (x: T) => any): (x: T) => any;
export declare function unless<T>(pred: (x: T) => boolean, f: (x: T) => any, x: T): any;
export declare function when<T>(pred: (x: T) => boolean): (f: (x: T) => any, x: T) => any;
export declare function when<T>(pred: (x: T) => boolean, f: (x: T) => any): (x: T) => any;
export declare function when<T>(pred: (x: T) => boolean, f: (x: T) => any, x: T): any;
export declare function until<T>(pred: (x: T) => boolean): (f: (x: T) => T, x: T) => T;
export declare function until<T>(pred: (x: T) => boolean, f: (x: T) => T): (x: T) => T;
export declare function until<T>(pred: (x: T) => boolean, f: (x: T) => T, x: T): T;
