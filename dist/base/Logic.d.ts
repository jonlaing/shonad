import { Function } from "ts-toolbelt";
declare function _allPass<A>(fs: Function.Function<[A], boolean>[]): (x: A) => boolean;
declare function _allPass<A>(fs: Function.Function<[A], boolean>[], x: A): boolean;
export declare const allPass: typeof _allPass;
declare function _and(a: boolean): (b: boolean) => boolean;
declare function _and(a: boolean, b: boolean): boolean;
export declare const and: typeof _and;
export declare const anyPass: typeof _allPass;
export declare const both: Function.Curry<(f: Function.Function, g: Function.Function, x: any) => boolean>;
export declare const either: Function.Curry<(f: Function.Function, g: Function.Function, x: any) => boolean>;
declare function _not(f: Function.Function): (x: NonNullable<any>) => boolean;
declare function _not(f: Function.Function, x: NonNullable<any>): boolean;
export declare const not: typeof _not;
export declare const or: Function.Curry<(a: boolean, b: boolean) => boolean>;
export declare const unless: Function.Curry<(pred: Function.Function, f: Function.Function, x: any) => any>;
export declare const when: Function.Curry<(pred: Function.Function, f: Function.Function, x: any) => any>;
export declare const until: Function.Curry<(pred: Function.Function, f: Function.Function, x: any) => any>;
export {};
