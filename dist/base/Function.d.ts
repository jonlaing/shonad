import { Function } from "ts-toolbelt";
export declare type Predicate<A> = (a: A) => boolean;
export declare const curryN: <Fn extends Function.Function<any, any>>(n: number, f: Fn) => Function.Curry<Fn>;
export declare const curry: <Fn extends Function.Function<any, any>>(f: Fn) => Function.Curry<Fn>;
declare function _compose<A, B>(...funcs: Function.Function[]): Function<A, B>;
export declare const compose: typeof _compose;
export declare const pipe: typeof _compose;
export declare const always: <A>(x: A) => (a?: any) => A;
export declare const false_: (a?: any) => boolean;
export declare const true_: (a?: any) => boolean;
export declare const identity: <A>(x: A) => A;
export declare const flip: Function.Curry<(<F extends Function.Function<any, any>>(f: F, a: Parameters<F>[1], b: Parameters<F>[0]) => any)>;
export declare type Function<A, B> = Function.Function<[A], B>;
declare function _fmap<A, B, C>(f: Function<B, C>): (x: Function<A, B>) => Function<A, C>;
declare function _fmap<A, B, C>(f: Function<B, C>, x: Function<A, B>): Function<A, C>;
export declare const fmap: typeof _fmap;
export {};
