import * as Fn from "../base/Function";
import { Const } from "../data/Const";
import { Identity } from "../data/Identity";
import * as Maybe from "../data/Maybe";
export declare type LensFamily<A, B, C, D> = (h: (c: C) => Fn.Function<D, A | C>, a: A) => Fn.Function<D, any>;
export declare type SimpleLens<A, B> = LensFamily<A, A, B, B>;
export declare const lens_: <A, B, C, D>(getter: Fn.Function<A, C>, setter: Fn.Function<A, Fn.Function<D, B>>) => LensFamily<A, B, C, D>;
export declare const lens: <A, B>(getter: Fn.Function<A, B>, setter: Fn.Function<A, Fn.Function<B, A>>) => SimpleLens<A, B>;
export declare type Getter<A, C> = (f: (c: C) => Const<any, any>) => (a: A) => Const<any, any>;
export declare const getting: <A, B>(g: (a: A) => B) => Getter<A, B>;
declare type Setter<A, D, B> = (f: () => Identity<D>) => (a: A) => Identity<B>;
export declare const setting: <A, D, B>(f: (a: A, d: D) => B) => Setter<A, D, B>;
export declare const view: <T, Val>(l: LensFamily<T, any, Val, any>, x: T) => Val;
export declare const over: <T, OldVal, NewVal>(l: LensFamily<T, NewVal, any, OldVal>, f: (val: OldVal) => NewVal, x: T) => T;
export declare const optional: <A>(fallback: A) => SimpleLens<Maybe.Maybe<A>, A>;
export declare const head: SimpleLens<any[], Maybe.Maybe<any>>;
export declare const tail: SimpleLens<any[], Maybe.Maybe<any[]>>;
export declare const index: (i: number) => SimpleLens<any[], Maybe.Maybe<any>>;
export declare const prop: (k: string) => SimpleLens<Record<string, any>, Maybe.Maybe<any>>;
export {};
